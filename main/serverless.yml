frameworkVersion: '4'

service: starter

# NOTE: plugin load order matters
plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'development'}
  #  vpc: # automatically adds the AWSLambdaVPCAccessExecutionRole policy to the iamRole
  #    securityGroupIds: ${file(env.yml):${self:provider.stage}.vpc.securityGroupIds}
  #    subnetIds: ${file(env.yml):${self:provider.stage}.vpc.subnetIds}
  environment:
    NODE_ENV: ${self:provider.stage}
  stackTags:
    serverless: 'true'
    environment: ${self:provider.stage}
  tags:
    serverless: 'true'
    environment: ${self:provider.stage}

functions:
  drug:
    handler: src/functions/drug.handler
    layers:
      - ${file(env.yml):${self:provider.stage}.layers.NodeModulesLayer}
    events:
      - http:
          path: drug
          method: post
    environment:
      TEST_ENVIRONMENT: ${file(env.yml):${self:provider.stage}.environment.TEST_ENVIRONMENT}

custom:
  serverless-offline:
    httpPort: 4044
    host: 0.0.0.0
  bundle:
    sourcemaps: true # Enable source maps
    caching: true # Enable Webpack caching
    concurrency: 5 # Set desired concurrency, defaults to the number of available cores
    stats: false # Don't print out any Webpack output
    linting: true # Enable linting as a part of the build process
    generateStatsFiles: false # Creates stats files that could be used for bundle analyzing, more below
    esbuild: false # Use esbuild-loader instead of babel or ts for faster builds
    disableForkTsChecker: false # Disable the ForkTsChecker plugin, more below
    tsConfig: 'tsconfig.serverless.json' # Path to your 'tsconfig.json', if it's not in the root
    packager: npm # Specify a packager, 'npm' or 'yarn'. Defaults to 'npm'.
    forceExclude: # Because it'll be provided through a Lambda Layer
      - aws-sdk
      - knex
      - objection
      - pg
      - uuid
